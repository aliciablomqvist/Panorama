@page "{id:int}" 
@model PanoramaApp.Pages.MovieLists.MovieListDetailsModel
@{
    ViewData["Title"] = Model.MovieList != null ? $"Details for {Model.MovieList.Name}" : "Movie List Details";
}

@if (Model.MovieList == null)
{
    <h2>Movie List Not Found</h2>
    <p>The requested movie list could not be found.</p>
    <a class="btn btn-primary" asp-page="/Movies/ViewMovieLists">Back to Movie Lists</a>
}
else
{
    <h2>@Model.MovieList.Name</h2>

    <button id="togglePriorityMode" class="btn btn-warning">Activate Prioritization Mode</button>

    <h3>Sort Movies</h3>
    <select id="sortBy" class="form-select">
        <option value="Title">Titel</option>
        <option value="ReleaseDate">Utgivningsdatum</option>
    </select>

    <h3>Movies in this List</h3>
    <div class="table-responsive">
        <table id="movieTable" class="table table-striped table-hover align-middle" data-sort-direction="asc">
<thead class="table-dark">
    <tr>
        <th scope="col"></th> 
        <th scope="col"></th> 
        <th scope="col"></th>
    </tr>
</thead>

            <tbody id="movieListBody">
                @foreach (var movieListItem in Model.MovieList.Movies)
                {
                    <tr draggable="true" data-id="@movieListItem.Movie?.Id" class="draggable priority-disabled" id="movieRow_@movieListItem.Movie?.Id">
                        <td class="priorityCell">@movieListItem.Movie?.Priority</td>
                        <td>@movieListItem.Movie?.Title</td>
                        <td>@movieListItem.Movie?.ReleaseDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h3>Actions</h3>
    <a class="btn btn-primary" asp-page="/MovieLists/AddToMovieList" asp-route-listId="@Model.MovieList.Id">Add Movies</a>
    <a class="btn btn-secondary" asp-page="/MovieLists/ShareList" asp-route-listId="@Model.MovieList.Id">Share this List</a>
    <a class="btn btn-danger" asp-page="/Movies/DeleteList" asp-route-id="@Model.MovieList.Id">Delete List</a>
    <a class="btn btn-secondary" asp-page="/MovieLists/ViewMovieLists">Back to Movie Lists</a>

}

@section Scripts {
    <script>
        const movieListId = @Model.MovieList.Id;
        let isPriorityMode = false;

        document.addEventListener("DOMContentLoaded", () => {
            const togglePriorityModeButton = document.getElementById("togglePriorityMode");
            const movieListBody = document.getElementById("movieListBody");

            togglePriorityModeButton.addEventListener("click", () => {
                isPriorityMode = !isPriorityMode;
                togglePriorityModeButton.textContent = isPriorityMode
                    ? "Deactivate Prioritization Mode"
                    : "Activate Prioritization Mode";

                document.querySelectorAll("#movieListBody tr").forEach(row => {
                    if (isPriorityMode) {
                        row.setAttribute("draggable", "true");
                        row.classList.remove("priority-disabled");
                    } else {
                        row.setAttribute("draggable", "false");
                        row.classList.add("priority-disabled");
                    }
                });
            });

            movieListBody.addEventListener("dragstart", (e) => {
                if (isPriorityMode) {
                    e.target.classList.add("dragging");
                }
            });

            movieListBody.addEventListener("dragend", async (e) => {
                if (isPriorityMode) {
                    e.target.classList.remove("dragging");

                    const rows = Array.from(movieListBody.querySelectorAll("tr"));
                    const updates = rows.map((row, index) => ({
                        id: parseInt(row.dataset.id, 10),
                        priority: index + 1 // Recalculate priorities starting from 1
                    }));

                    rows.forEach((row, index) => {
                        const priorityCell = row.querySelector(".priorityCell");
                        if (priorityCell) {
                            priorityCell.textContent = index + 1; // Update priority column dynamically
                        }
                    });

                    const response = await fetch(`/Movies/MovieListDetails/${movieListId}?handler=SavePriorities`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(updates),
                    });

                    if (response.ok) {
                        console.log("Priorities saved successfully!");
                    } else {
                        console.error("An error occurred while saving priorities.");
                    }
                }
            });

            movieListBody.addEventListener("dragover", (e) => {
                if (isPriorityMode) {
                    e.preventDefault();
                    const afterElement = getDragAfterElement(movieListBody, e.clientY);
                    const dragging = document.querySelector(".dragging");
                    if (afterElement === null) {
                        movieListBody.appendChild(dragging);
                    } else {
                        movieListBody.insertBefore(dragging, afterElement);
                    }
                }
            });

            // Sorting functionality
            document.getElementById("sortBy").addEventListener("change", (e) => {
                const sortBy = e.target.value;
                const rows = Array.from(movieListBody.querySelectorAll("tr"));

                if (sortBy === "Title") {
                    rows.sort((a, b) => a.cells[1].innerText.localeCompare(b.cells[1].innerText));
                } else if (sortBy === "ReleaseDate") {
                    rows.sort((a, b) => new Date(a.cells[2].innerText) - new Date(b.cells[2].innerText));
                } else if (sortBy === "Priority") {
                    rows.sort((a, b) => a.cells[0].innerText - b.cells[0].innerText);
                }

                movieListBody.innerHTML = "";
                rows.forEach(row => movieListBody.appendChild(row));
            });
        });

        function getDragAfterElement(container, y) {
            const elements = [...container.querySelectorAll(".draggable:not(.dragging)")];
            return elements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                return offset < 0 && offset > closest.offset ? { offset, element: child } : closest;
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }
    </script>
}